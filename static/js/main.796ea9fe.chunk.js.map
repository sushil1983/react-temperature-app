{"version":3,"sources":["components/Form.js","components/Title.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","react_default","a","createElement","onSubmit","this","props","getWeather","type","name","placeholder","React","Component","Title","className","Weather","city","region","country","temperature","condition","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","value","fetch","concat","sent","json","_this","setState","location","current","text","last_updated","temp_c","stop","components_Title","components_Form","components_Weather","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.796ea9fe.chunk.js","sourcesContent":["import\tReact from 'react'\r\n\r\nclass Form extends React.Component{\r\n\trender(){\r\n\treturn(\r\n\r\n\t\t<div>\r\n\t\t\t\r\n\t\t<form  onSubmit={this.props.getWeather}>\r\n\t\t\t<input type = \"text\" name = \"city\" placeholder = \"city..\"/>\r\n\t\t\t<input type = \"text\" name = \"country\" placeholder = \"country..\"/>\r\n\t\t\t<button>Get Weather</button>\r\n\t\t</form>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n}\r\n\r\nexport default Form;","import React from 'react' ;\r\n\r\nfunction Title() {\r\n\treturn(\r\n         \r\n         <div>\r\n         <h1 className =\"Title-container__Title\">Weather Application</h1>\r\n          <p className =\"Title-container__Subtitle\"> Find weather of city </p>\r\n         </div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Title;\r\n\r\n","import\tReact from 'react'\r\n\r\nclass Weather extends React.Component{\r\n\t\r\n\trender(){\r\n\treturn(\r\n \t\t\t<div className =\"weather__info\">\r\n\t\t\t \t\t{this.props.city&& <p className=\"weather__key\">CITY : \r\n\r\n\t\t\t \t\t<span className=\"weather__value\">{this.props.city}</span>\r\n\t\t\t \t\t</p>}\r\n\t\t\t         {this.props.region && <p className=\"weather__key\" >AREA: \r\n\r\n\t\t\t         <span className=\"weather__value \">{this.props.region}</span></p>}\r\n\t\t\t \t\t\r\n\r\n\t\t\t        {this.props.country && <p className=\"weather__key\">COUNTRY:\r\n\r\n\t\t\t        <span className=\"weather__value\" >{this.props.country}</span></p>}\r\n\t\t\t        {this.props.temperature && <p className=\"weather__key\" >TEMPERATURE : \r\n\r\n\t\t\t        <span className=\"weather__value\" >{this.props.temperature}</span></p>}\r\n\t\t\t        {this.props.condition && <p className=\"weather__key\">CONDITION:\r\n\r\n\t\t\t        <span className=\"weather__value \">{this.props.condition}</span></p>}\r\n\t\t\t        {this.props.humidity && <p className=\"weather__key\">HUMIDITY:\r\n\r\n\t\t\t        <span className=\"weather__value \" >{this.props.humidity}</span></p>}\r\n\t\t\t        {this.props.description && <p className=\"weather__key\">DESCRIPTION:\r\n\r\n\t\t\t        <span className=\"weather__value\" >{this.props.description}</span></p>}\r\n\t\t\t      \t{this.props.error &&  <p className=\"weather__key\"> ERROR :{this.props.error}</p>}\r\n \t\t\t</div>\r\n \r\n\t\t);\r\n\r\n\r\n}\r\n}\r\n\r\nexport default Weather;\r\n\r\n","\nimport  React from 'react'\nimport Form from './components/Form'; \nimport Title from './components/Title'\nimport Weather from './components/Weather';\n\nconst API_KEY = \"024647bb15364869812105140192805\"\n\nclass App extends React.Component {\nstate ={\n\n        condition:undefined,        \n        country:undefined,        \n        description:undefined, \n        humidity:undefined,\n        region : undefined,\n        temperature : undefined,\n        city : undefined,\n        error:undefined\n\n}\n\n    \n    getWeather = async(e) => { \n      e.preventDefault();\n      const city = e.target.city.value;\n    const country = e.target.country.value;\n    const api_call = await fetch(`http://api.apixu.com/v1/current.json?key=${API_KEY}&q=${city} ${country}`);\n    const data =  await api_call.json();\n if(city && country){\n      this.setState({\n      city : data.location.name,\n        condition : data.current.condition.text,\n        country : data.location.country,\n        description : data.current.last_updated,\n          humidity : data.current.humidity,\n           region :data.location.region ,\n        temperature : data.current.temp_c,\n    }) }else \n          {\n            this.setState({\n              error: 'please enter city and country'\n            })\n          }\n }\n\n   \n        \n        render(){\n          return(\n                <div>\n                  <div className=\"wrapper\">\n                    <div className=\"main\">\n                      <div className=\"container\">\n                        <div className=\"row\">\n                        <div className=\"col-xs-5 title-container\">\n                        <Title    />\n                        </div>\n                        <div className=\"col-xs-7 form-container\">\n                          <Form getWeather ={this.getWeather}/>\n\n\n                  <Weather \n                  city = {this.state.city}\n                  condition = {this.state.condition}\n                  country = {this.state.country}\n                  description =  {this.state.description}\n                  humidity = {this.state.humidity}\n                  region = {this.state.region}\n                  temperature = {this.state.temperature}\n                  error = {this.state.error}\n                  />\n                        </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                </div>\n\n            )\n        }\n      };\n\nexport default App;\n\n\n \n                  \n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport'./App.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}